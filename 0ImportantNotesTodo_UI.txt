https://www.w3schools.com/react/react_usestate.asp

https://www.w3schools.com/react/react_useeffect.asp



setTimeout() is an asynchronous function, meaning that the timer function will not pause execution of other functions in the functions stack.        <!DOCTYPE html>
        <html>
        <body>

        <h1>JavaScript Functions</h1>
        <h2>setInterval() with a Callback</h2>

        <p>Wait 3 seconds (3000 milliseconds) for this page to change.</p>

        <h1 id="demo"></h1>

        <script>
        setTimeout(function() { myFunction("I love You !!!"); }, 3000);


        myFunction("test");
        function myFunction(value) {
        document.getElementById("demo").innerHTML = value;
        }
        </script>

        </body>
        </html>


        output:
        ==========
        initial output
        ===============
        JavaScript Functions
        setInterval() with a Callback
        Wait 3 seconds (3000 milliseconds) for this page to change.
        test


        Final output
        =================
        JavaScript Functions
        setInterval() with a Callback
        Wait 3 seconds (3000 milliseconds) for this page to change.
        I love You !!!


useState and useEffect
===================


import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  }, []); // <- add empty brackets here
  
  return <h1>I've rendered {count} times!</h1>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Timer />);

Here as we gave [] empty list as dependencies useEffect runs once on initial render from Timer() call
and it has setTimeout which is asynchronous
So
initial output
Ive rendered 0 times

and as count is a state variable which is updated from useEffect
the output changes on change of count state variable.
ive rendered 1 times.

======================
161. Display the links as per user authentication in the header
see above heading in 01Registration and Login UI

in getAllTodos API in springBoot

        try {
            Thread.sleep(10000); // added just like that to see behaviour
            //  in React the state variable todos in ListTodoComponent.jsx
            // on the change of this state variable , the  data is automatically rendered in the table.
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
I have added sleep to see its effect in ListTodoComponent.jsx
in ListTodoComponent.jsx there is a state variable todos,setTodos


  
Here as we gave [] empty list as dependencies useEffect runs once on initial render
it calls listTodos. in listTodos there is getAllTodos which is asynchronous call,
once response is received from getAllTodos it updates the todos state variable. On todos state variable update
it automatically updates the table data.
initial output
table with empty data.

the output changes on change of todos state variable.


=========================
Without async and await 
in function handleLoginForm(e){
LoginComponent.jsx

in AuthServiceImpl.java - Login also i put sleep
so login takes time to give reposnse
and here as login call is made asynchronously, here i see am after loginApiCall which is ....
is executed first asynchronously 

Here initially 
1st LoginComponent.jsx is called
        in logincomponent loginAPICall is called asynchronously
            from loginAPICall it calls     return axios.post(AUTH_REST_API_BASE_URL+'/login',{usernameOrEmail,password});
                    but in AuthServiceImpl.java i put sleep for 10 secs 
                So till the time the loginAPICall IN LoginComponent is called back
        It asynchronously excecute the after code which is     console.log("am after loginApiCall which is after and I execute first if this is asynchronous call")

        and once the call back is made from axio.post
            control is back to loginAPICall


handleLoginForm:
{
    username: "test1234567",
password: "123456"}
AuthService.js : loginAPICall: 
am here in loginApiCall
AuthService.js:39 test1234567
LoginComponent.jsx:35 am after loginApiCall which is after and I execute first if this is asynchronous call
LoginComponent.jsx:23 seems i didnt print first  I waited after loginAPICall is called back from axios
LoginComponent.jsx:24 User loggedin Successfully

test1234567
2TodoService.js:63 Basic dGVzdDEyMzQ1Njc6MTIzNDU2

========================
Without async and await 
in function handleLoginForm(e){
LoginComponent.jsx


handleLoginForm:
{
    username: "test1234567",
password: "123456"}
AuthService.js:37 loginAPICall: am here in loginApiCall
AuthService.js:39 test1234567
LoginComponent.jsx:48 this time loginAPICall is not executed asynchronously  and control waits here untill callback is made for loginAPICall
LoginComponent.jsx:49 User loggedin Successfully
AuthService.ks:60 test1234567
LoginComponent.jsx:60 am after loginApiCall which is after and I execute last as if this is asynchronous call
2TodoService.js:63 Basic dGVzdDEyMzQ1Njc6MTIzNDU2







package.json
============
Well, within a package.json file, we can configure all the dependencies and scripts that are required for our React application.
And most importantly, we can configure the project name and version for the project and also the scripts.
Well, if you can see the scripts section over here.
So here we have configured the scripts to run the React application, to build the React application
and to preview the React application.
Next, within the dependencies section, you can see the React library and its version and ReactDOM library
and its version.
And here are the few devDependencies as well.


All right, so this package.json file basically contains all the dependencies and scripts that are required
for our React application.


index.html file
================
As we use React to build a single page application.
So typically you can find a single HTML file in a react application.
So index.html is a single HTML file in a react application.
And if you can see here, this HTML file has a body and within that we have a div and it has a ID root.
Well, whatever the React components that we are going to create in our React application, that components
will be rendered within this
div All right. so just remember we use React to build a single page application.

node_modules
==========
whenever we execute NPM install command, then NPM install command will basically download and
install all the JavaScript packages within this node_modules folder.
public folder
===============
We keep all the svg, images files and etc.
SRC folder
=============
App.jsx file
===========
Well, within App.jsx file you can see the App component.
Well, basically App component is a base component or a root component.
And within this App component, we can import and use the other React components.

main.jsx file
================
main.jsx file is the main entry point for our React application.
And within this main.jsx code, you can see this piece of code.
Well, if you go to index.html file, within that we have a div, it has a ID root, right.
And if you go to again main.jsx file and here you can see 
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

we have passed the div ID that is root.
So this createRoot will get the div by using this root ID and then it will call the render method
to display this App component in a div.

So basically this index.html has a div with ID root and this root id will be used in a main.jsx
file here.
Okay.
So this ReactDOM dot createRoot method will get the div by using this root id and then it will call
render method to display this App component within this div.
Okay, perfect.
So these are the important folders and files in our React application.

App.css
=============
So all the CSS style related, you know, piece of code we can write within this App.css file and
index.css file.


Next, let us create a simple react functional component and then we'll understand the flow of our React application.
So go to SRC folder here.
Within that, create a new file.
Let's new file name as HelloWorld.jsx
Well, we are going to write a JSX code within this file.
That's why the extension JSX.
Well, you can use either JS or but basically within a react component, we write a JSX code.
That's why here I'm going to give extension as JSX. Within this file,
Let's quickly create a React functional component.
So here just type export default.
Followed by the function keyword and then the component name.
So let's give component name as HelloWorld.
So this is the naming convention to create the component name.
So make sure that the component name should be, you know, start with a capital letter.
Next, let us have a return statement and then let's write the code.
Well, JSX is basically a JavaScript, you know, extension syntax and JSX allows us to write HTML and
JavaScript code together.
Okay.
So basically this function is a JavaScript function, and within this function we can write the HTML
code here.
So here just have a H1 element.
Next, let us write the heading something like HelloWorld Perfect.
Now, we have created a simple React functional component.
Next, let us see how to import this React component in a App component.
So go to App.jsx file.
So App.jsx file contains a App as a root component.
So within this root component we can import and use other components.
Right?
So here, let me remove this H1 element and let me use HelloWorld component here.
So here just type HelloWorld and let's close this component and make sure that we import this Hello
world component at the top.
Okay, perfect.
Next, let us save this file and let's go back to browser
and there we go.
You can able to see Hello World is printed.
Next, let me go back to the project and let me go to HelloWorld component.
And here let me print something like Hello World component and just save it and let's go back to browser
and here you can see Hello World component.
All right, so this is how we can create the React component and we can use it in a other components.
Well, we can use this component as many times as we want in our React application.
For example, here in App.jsx file, we have used this HelloWorld component once.
We can also use multiple times.
For example, let me copy paste over here five times and let me go back to browser and you can see Hello
world component is displayed five times.
This is the beauty of react.
We can create a component and we can use as many times as we want in our React application.


React application flow.
=============================

Well, here we have index.html file.
It has a div with id root. Next, main.jsx file.
So this piece of code will execute first in a browser and here you can see the code ReactDOM dot create
root.
So createRoot method will get the div by using this root ID and then it will call render method to render
this App component in a div and this App component basically uses HelloWorld component.
Okay.
So if you can see in a browser first, the main.jsx file will be executed in a browser and then this
ReactDOM dot createRoot method will get the div by using this root id well you can see index.html.
It has a div with id root.
Right.
So this root id will be used here and next it will call the render method and it will display the app
component.
And the App component contains the HelloWorld component.
So this is a simple flow of our React application.
In next lecture, we will see how to install bootstrap CSS library in our React application.
All right, great.
I will see you in the next lecture.



useEffect Hook
=============

let us useEffect hook to perform the side effects in this functional components.
Well, whenever you want to make a REST API call or the Ajax call in a react functional component, you can use useEffect hook.
Okay, so if you use class component, then you use, you know, ComponentDidMount and ComponentDidUpdate
lifecycle methods, right?
But in functional components, we can't use these lifecycle methods.
We have to use useEffect hook to perform, fetching the data or making the rest API call or, making the Ajax calls.
So here, let me show you how to useEffect hook to fetch the data or to make the rest API call.

    useEffect(()=>{},[])


Next, you can see the syntax of the useEffect hook.
First parameter is the callback function and second is dependency list.
So here let's have a callback function as a first parameter.
And second parameter is a dependency list.
So as of now there is no no dependency list for this useEffect hook.
Next, within this object we can write the code to make the REST API call.
So we have already made a REST API call using Axios library in a TodoService so we can simply call this get
all todos method in a useEffect hook.

So here what we will do, we'll create a separate function and let's call it as listTodos.
And within this function let's call getAllTodos method from TodoService.js file.


    const [todos,setTodos] = useState([])

    function listTodos()
    {
        getAllTodos().then((response)=>{
            setTodos(response.data);
        }).catch(error=>{console.error(error);
        })
    }

    useEffect(()=>{
        listTodos();
    },[])
	
Next, getAllTodos and then call its then method and then method takes a callback function.
So here what we'll do, we'll have a response object.
Next, we need to store the response of the rest API in a todos state variable.
For that we can use setTodos method.
So todos is a state variable and setTodos is a function that we can use to update the state variable.
So here just call setTodos and then response dot data.
Perfect.
Next, we can also have a catch block and then we can display the error.
So here let's have a error object and then arrow function and then console.error and then pass error object.


NAavLink
=============
Next step is add a register button to the header.
So let's go to HeaderComponent.jsx file and add more divs for each nav-item

To do it within the list element, let's call NavLink component from react router dom library.
So this NavLink is very useful because whenever we want to build the navigation bar or the tabs in
the header, then we can use this NavLink, component from React router Dom library.
So this, component will help us to select the currently selected tab.
Next use to attribute of this NavLink component and let us specify the URL that we want
to navigate.
So in this case, we want to navigate to the register page, 

for rows we use space row mb-3, for columns use - col-md-3
<div className='row mb-3'>
                                <label className='col-md-3



The logical AND expression is a short-circuit operator. As each operand is converted to a boolean, if the result of one conversion is found to be false, the AND operator stops and returns the original value of that falsy operand; it does not evaluate any of the remaining operands.
function A() {
  console.log("called A");
  return false;
}
function B() {
  console.log("called B");
  return true;
}

console.log(A() && B());
// Logs "called A" to the console due to the call for function A,
// && evaluates to false (function A returns false), then false is logged to the console;
// the AND operator short-circuits here and ignores function B